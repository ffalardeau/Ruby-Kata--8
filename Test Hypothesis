Hypothesis 

Written in Ruby 1.9
From my understanding the use of require_relative might not be backward compatible with previous version of Ruby.

The "wordlist.txt" file I received has 45433 lines, but my program only read 45425 words ...
The first and last word are correct (They are verified but an RSpec test)
To be transparent with this error I have a failing test that expects to read 45433 words but only find 45425. 

In my list of word that were "assembled" by two other words, I have kept the "doubles" if the word is composed of different words. 
For example the word "wooden" is there twice: combination of "woo" + "den" and "wood" + "en"
I did not keep track of how the assembled word were construct "woo" + "den", I could have done so by wrapping the word in a an object that could have kept 
this information. 

Terrible, Readable and Optimized solutions: 

Doing this exercise in TDD, I quickly found a algorithm that solved the solution with a single Array of 5 to 7 words. 
But when testing this algorithm to the real deal (45425 words) it was way too slow. So slow that it actually overheated my PC after running for too long. 
Let's call it the Terrible algorithm was in fact very simple and readable. Loop through 2 Arrays of words with less than 6 letters. Be sure that the same word would not be in both Arrays and try to combine them to form a word. The newly form word was then compared to all the 6 letters found in the provided dictionary. If it was in there then we had a winner that was kept in an "assembled" word array. 

My Readable solution consists of splitting the dictionary in an hashmap that contains an alphabet letter as key and all the words starting with this letter as value. In this particular problem, I start by getting all the words that have 6 letters of less and than splitting them in the hashmap. 
Running the command time ruby main.rb on my program I get those data : 
727 assembled words were found
real	0m3.656s
user	0m3.580s
sys	0m0.040s

Having browsed through the dictionary you provided I have seen that there were no words of one letter. Therefore I could have build my hashmap using only words of 2, 3 or 4 letters this gives me a performance of :  
727 assembled words were found
real	0m1.127s
user	0m1.064s
sys	0m0.020s

To see this substract 1 to maximumNumberOfLetters in the split_dictionary method of the ReadableKataEight class: 
fiveLetterWords = @wordArrayFilter.get_words_with_less_than_x_letter(maximumNumberOfLetters - 1, words)
But since there might be another dictionary with single letter words I have not include this optimisation in the code you will received. 

My Optimized solution consist in storing the potential words to be assemble within an HashMap. I than scan the six letter words for each possibility of combination and I check if the those word exists within the HashMap. Here are my results : 
727 assembled words were found
real	0m0.204s
user	0m0.172s
sys	0m0.024s



